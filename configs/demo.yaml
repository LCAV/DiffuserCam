# hydra:
#   job:
#     chdir: True    # change to output folder


fp: data/original/tree.png
output: demo_lensless   # output folder for results
save: True
plot: False

rpi:
  username: null
  hostname: null
  python: ~/LenslessPiCam/lensless_env/bin/python
  
display:
  # default to this screen: https://www.dell.com/en-us/work/shop/dell-ultrasharp-usb-c-hub-monitor-u2421e/apd/210-axmg/monitors-monitor-accessories#techspecs_section
  screen_res: [1920, 1200]   # width, height
  pad: 0
  hshift: 0
  vshift: 0
  brightness: 100
  rot90: 3

  # display point source on screen (provide number of pixels)
  psf: null
  # all black screen
  black: False
  # all white screen
  white: False

capture:
  gamma: null # for visualization
  script: ~/LenslessPiCam/scripts/measure/on_device_capture.py
  delay: 2

  # -- capture settings
  sensor: rpi_hq
  legacy: True   # Legacy image capture software (raspistill) or new one (libcamera)
  bayer: True    # whether to capture Bayer data, otherwise directly capture RGB (demosaiced) data
  nbits_capture: 12   # bit-depth to capture, check support bit depth of sensor: lensless/hardware/sensor.py
  fn: raw_data    # output file name
  exp: 0.02
  config_pause: 2
  sensor_mode: "0"   # {'off': 0, 'auto': 1, 'sunlight': 2, 'cloudy': 3, 'shade': 4, 'tungsten': 5, 'fluorescent': 6, 'incandescent': 7, 'flash': 8, 'horizon': 9}
  iso: 100

  # -- if bayer=True, capture Bayer data but return as RGB or grayscale
  gray: False     # only for legacy=True, if bayer=True, remote script returns grayscale data
  # rgb: False   # only for legacy=True, if bayer=True, remote script return RGB data
  # nbits_out: 12
  nbits_out: 8   # used if gray=True or rgb=True

  # remote script return Bayer data, full res
  # awb_gains: null
  # rgb: False
  # down: null

  # remote script returns RGB data
  rgb: True
  down: 4
  awb_gains: [1.9, 1.2]


camera:
  # these gains are not applied if rgb=True
  red_gain: 1.9
  blue_gain: 1.2
  psf: data/psf/tape_rgb_31032023.png
  background: null


recon:
  gamma: 2.2  # for visualization
  downsample: 4
  dtype: float32
  use_torch: True
  torch_device: cuda:0
  
  algo: admm

  # -- fista
  fista:
    n_iter: 300
    disp_iter: null
    tk: 1

  # -- admm
  admm:
    n_iter: 10
    disp_iter: null
    mu1: 1e-6
    mu2: 1e-5
    mu3: 4e-5
    tau: 0.0001

  # -- unrolled admm
  unrolled_admm:
    n_iter: 20
    disp_iter: null
    # download from here: https://drive.switch.ch/index.php/s/A4Aq6rTSBwzcyUP
    checkpoint_fp: models/UnrolledADMM20_CelebA_20231306.pt

  # -- unet
  unet:
    gpu: True
    # download from here: https://drive.switch.ch/index.php/s/A4Aq6rTSBwzcyUP
    model_path: models/wallerlab_unet.pb
    # model_path: models/wallerlab_unet_inversion.pb
    input_shape: [1, 270, 480, 3]

postproc:
  # crop in percent to extract region of interest
  # set to null to skip
  crop_hor: [0.22, 0.71]
  crop_vert: [0., 0.86]