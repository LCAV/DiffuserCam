# python scripts/recon/train_unrolled.py
hydra:
  job:
    chdir: True    # change to output folder

# Dataset
files:
  dataset: data/DiffuserCam   # Simulated : "mnist", "fashion_mnist", "cifar10", "CelebA". Measure :"DiffuserCam"
  celeba_root: null   # path to parent directory of CelebA: https://mmlab.ie.cuhk.edu.hk/projects/CelebA.html
  psf: data/psf.tiff
  diffusercam_psf: True
  n_files: null    # null to use all for both train/test
  downsample: 2    # factor by which to downsample the PSF, note that for DiffuserCam the PSF has 4x the resolution
  test_size: 0.15

torch: True
torch_device: 'cuda'

display:
  # How many iterations to wait for intermediate plot. 
  # Set to negative value for no intermediate plots.
  disp: 500
  # Whether to plot results.
  plot: True
  # Gamma factor for plotting.
  gamma: null

# Whether to save intermediate and final reconstructions.
save: True

reconstruction:
  # Method: unrolled_admm, unrolled_fista
  method: unrolled_admm

  # Hyperparameters for each method
  unrolled_fista: # for unrolled_fista
    # Number of iterations
    n_iter: 20
    tk: 1
    learn_tk: True
  unrolled_admm:
    # Number of iterations
    n_iter: 20
    # Hyperparameters
    mu1: 1e-4
    mu2: 1e-4
    mu3: 1e-4
    tau: 2e-4
  pre_process: 
    network : null  # UnetRes or DruNet or null
    depth : 2 # depth of each up/downsampling layer. Ignore if network is DruNet
  post_process: 
    network : null  # UnetRes or DruNet or null
    depth : 2 # depth of each up/downsampling layer. Ignore if network is DruNet

#Trainable Mask
trainable_mask:
  mask_type: Null #Null or "TrainablePSF"
  # "random" (with shape of config.files.psf) or "psf" (using config.files.psf)
  initial_value: psf
  grayscale: False
  mask_lr: 1e-3
  L1_strength: 1.0  #False or float

target: "object_plane"    # "original" or "object_plane" or "label"

#for simulated dataset
simulation:
  grayscale: False
  output_dim: null     # should be set if no PSF is used    
  # random variations
  object_height: 0.04   # range for random height or scalar
  flip: True # change the orientation of the object (from vertical to horizontal)
  random_shift: False
  random_vflip: 0.5
  random_hflip: 0.5
  random_rotate: False
  # these distance parameters are typically fixed for a given PSF
  # for DiffuserCam psf # for tape_rgb psf     
  scene2mask: 10e-2     # scene2mask: 40e-2       
  mask2sensor: 9e-3     # mask2sensor: 4e-3       
  # see waveprop.devices
  sensor: "rpi_hq"
  snr_db: 10
  # simulate different sensor resolution
  # output_dim: [24, 32]    # [H, W] or null
  # Downsampling for PSF
  downsample: 8
  # max val in simulated measured (quantized 8 bits)
  quantize: False   # must be False for differentiability
  max_val: 255

#Training

training:
  batch_size: 8
  epoch: 50
  eval_batch_size: 10
  metric_for_best_model: null   # e.g. LPIPS_Vgg, null does test loss
  save_every: null
  #In case of instable training
  skip_NAN: True
  slow_start: False  #float how much to reduce lr for first epoch

  crop: null   # crop region for computing loss
  # crop:
  #   vertical: [30, 560]
  #   horizontal: [275, 710]

optimizer:
  type: Adam
  lr: 1e-4
  
loss: 'l2'
# set lpips to false to deactivate. Otherwise, give the weigth for the loss (the main loss l2/l1 always having a weigth of 1)
lpips: 1.0